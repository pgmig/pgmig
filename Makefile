
SHELL          = /bin/bash
CFG            = .env

PRG           ?= $(shell basename $$PWD)

#PKGS ?= a b
PKGS ?= pgmig

# -----------------------------------------------------------------------------
# Build config

GO            ?= go
VERSION       ?= $(shell git describe --tags)
SOURCES       ?= cmd/*/*.go *.go

# -----------------------------------------------------------------------------
# Docker image config

# application name, docker-compose prefix
PROJECT_NAME  ?= $(PRG)

# Hardcoded in docker-compose.yml service name
DC_SERVICE    ?= app

# Generated docker image
DC_IMAGE      ?= $(PRG)

# docker/compose version
DC_VER        ?= 1.23.2

# golang image version
GO_VER        ?= 1.12.6

# docker app for change inside containers
DOCKER_BIN    ?= docker

# Postgresql container name
PG_CONTAINER  ?= dcape_db_1
# Postgresql container network
PG_NETWORK    ?= dcape_net

# -----------------------------------------------------------------------------
# Runtime data

PGDATABASE    ?= $(PRG)
PGUSER        ?= $(PRG)
PGPASSWORD    ?= $(shell < /dev/urandom tr -dc A-Za-z0-9 | head -c14; echo)

PGHOST        ?= localhost
PGPORT        ?= 5432
PGSSLMODE     ?= disable
PGAPPNAME     ?= $(PRG)

define CONFIG_DEFAULT
# ------------------------------------------------------------------------------
# pgmig config file, generated by make $(CFG)

# Database

# Host
PGHOST=$(PGHOST)
# Port
PGPORT=$(PGPORT)
# Name
PGDATABASE=$(PGDATABASE)
# User
PGUSER=$(PGUSER)
# Password
PGPASSWORD=$(PGPASSWORD)

# Client name inside database
PGAPPNAME=$(PGAPPNAME)
# connect via SSL
PGSSLMODE=$(PGSSLMODE)

# Postgresql container network
PG_NETWORK=$(PG_NETWORK)

endef
export CONFIG_DEFAULT

-include $(CFG)
export

#.EXPORT_ALL_VARIABLES:

# -----------------------------------------------------------------------------

.PHONY: all gen doc build-standalone coverage cov-html build test lint fmt vet vendor up down build-docker clean-docker

##
## Available make targets
##

# default: show target list
all: help

# ------------------------------------------------------------------------------
## Sources

## Run from sources
run:
	$(GO) run ./cmd/$(PRG)/ create $(PKGS)

run-%:
	$(GO) run ./cmd/$(PRG)/ --verbose $* $(PKGS)

run-list-%:
	$(GO) run ./cmd/$(PRG)/ --verbose --mig.listonly $* $(PKGS)

## Build app with checks
build-all: lint lint-more vet cov build

## Build app
build: 
	go build -ldflags "-X main.version=$(VERSION)" ./cmd/$(PRG)

## Build app used in docker from scratch
build-standalone: cov vet lint lint-more
	CGO_ENABLED=0 GOOS=linux go build -ldflags "-X main.version=`git describe --tags`" -installsuffix 'static' -a ./cmd/$(PRG)

## Generate mocks
gen:
	$(GO) generate ./...

## Format go sources
fmt:
	$(GO) fmt ./...

## Run vet
vet:
	$(GO) vet ./...

## Run linter
lint:
	golint ./...

## Run more linters
lint-more:
	golangci-lint run ./...

## Run tests and fill coverage.out
cov: coverage.out

# internal target
coverage.out: $(SOURCES)
	$(GO) test -test.v -test.race -coverprofile=$@ -covermode=atomic ./...

## Open coverage report in browser
cov-html: cov
	$(GO) tool cover -html=coverage.out

## Clean coverage report
cov-clean:
	rm -f coverage.*

# ------------------------------------------------------------------------------
# DB operations with docker and [dcape](https://github.com/dopos/dcape)

# (internal) Wait for postgresql container start
docker-wait:
	@echo -n "Checking PG is ready..."
	@until [[ `docker inspect -f "{{.State.Health.Status}}" $$PG_CONTAINER` == healthy ]] ; do sleep 1 ; echo -n "." ; done
	@echo "Ok"

## Create user, db and load dump
db-create: docker-wait
	@echo "*** $@ ***" ; \
	docker exec -i $$PG_CONTAINER psql -U postgres -c "CREATE USER \"$$PGUSER\" WITH PASSWORD '$$PGPASSWORD';" || true ; \
	docker exec -i $$PG_CONTAINER psql -U postgres -c "CREATE DATABASE \"$$PGDATABASE\" OWNER \"$$PGUSER\";" || db_exists=1 ; \

## Drop database and user
db-drop: docker-wait
	@echo "*** $@ ***"
	@docker exec -it $$PG_CONTAINER psql -U postgres -c "DROP DATABASE \"$$PGDATABASE\";" || true
	@docker exec -it $$PG_CONTAINER psql -U postgres -c "DROP USER \"$$PGUSER\";" || true

psql: docker-wait ## Run psql
	@docker exec -it $$PG_CONTAINER psql -U $$PGUSER -d $$PGDATABASE


# ------------------------------------------------------------------------------
## Misc

## Count lines of code (including tests) and update LOC.md
cloc: LOC.md

LOC.md: $(SOURCES)
	cloc --by-file --not-match-f='(_moq_test.go|ml|.md|.sh|.json|file)$$' --md . > $@ 2>/dev/null
	cloc --by-file --not-match-f='(_test.go|ml|.md|.sh|.json|file)$$' . 2>/dev/null
	cloc --by-file --not-match-f='_moq_test.go$$' --match-f='_test.go$$' .  2>/dev/null

# create initial config
$(CFG):
	@[ -f $@ ] || { echo "Creating default $@" ; echo "$$CONFIG_DEFAULT" > $@ ; }

## Create default config file
config:
	@true

## List Makefile targets
help:  Makefile
	@grep -A1 "^##" $< | grep -vE '^--$$' | sed -E '/^##/{N;s/^## (.+)\n(.+):(.*)/\t\2:\1/}' | column -t -s ':'
